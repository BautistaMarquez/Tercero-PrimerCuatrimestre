Ejercicio 3
Dado el siguiente código implementado en la clase Document y que calcula algunas estadísticas del mismo:
1.Enumere los code smell y que refactorings utilizará para solucionarlos.
2.Aplique los refactorings encontrados, mostrando el código refactorizado luego de aplicar cada uno.
3.Analice el código original y detecte si existe un problema al calcular las estadísticas. Explique cuál es el error y en qué casos se da ¿El error identificado sigue presente luego de realizar los refactorings? En caso de que no esté presente, ¿en qué momento se resolvió? De acuerdo a lo visto en la teoría, ¿podemos considerar esto un refactoring?

public class Document {
    List<String> words;
  
    public long characterCount() {
 	long count = this.words.stream().mapToLong(w -> w.length()).sum();
    	return count;
	}
	
    public long calculateAvg() {
    	long avgLength = this.words.stream().mapToLong(w -> w.length()).sum() / this.words.size();
 	return avgLength;
	}
	
// Resto del código que no importa
}

El fallo esta en hacer la division despues del sum? 
Si hay un error en el codigo se supone que esta mal hacer refactoring porque el refactoring no modifica funcionalidades. Y se supone que el refactoring se hace teniendo tests en VERDE. 
realmente no encuentro code smells, supongo que son cosas internas de java que se me estan escapando? 
Falla por no contar espacios?

Ejercicio 3
Dado el siguiente código implementado en la clase Document y que calcula algunas estadísticas del mismo:
1.Enumere los code smell y que refactorings utilizará para solucionarlos.
2.Aplique los refactorings encontrados, mostrando el código refactorizado luego de aplicar cada uno.
3.Analice el código original y detecte si existe un problema al calcular las estadísticas. Explique cuál es el error y en qué 
casos se da ¿El error identificado sigue presente luego de realizar los refactorings? En caso de que no esté presente, 
¿en qué momento se resolvió? De acuerdo a lo visto en la teoría, ¿podemos considerar esto un refactoring?

//PROBLEMA: Division por 0

public class Document {
    List<String> words;
  
    public long characterCount() {
 	long count = this.words.stream().mapToLong(w -> w.length()).sum();
    	return count;
	}
	
    public long calculateAvg() {
    	long avgLength = this.words.stream().mapToLong(w -> w.length()).sum() / this.words.size();
 	return avgLength;
	}
	
// Resto del código que no importa
}


Usar .MD
1. 
bad smells:
.codigo duplicado, lo soluciono con extract method. 
.inline variable/variables temporales, lo soluciono Remplace temp with query. Para eliminar variables temporales hay que hacer un metodo.
.nombre misterioso, lo soluciono con rename method. 

2.
Paso 1. Codigo duplicado.

public class Document {
    List<String> words;
  
    public long characterCount() {
 	long count = this.sumaDeCaracteres;
    	return count;
	}
	
    public long calculateAvg() {
    	long avgLength = this.sumaDeCaracteres / this.words.size();
 	return avgLength;
	}
	
	public long sumaDeCaracteres(){
		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
}

Paso 2.1 Variables temporales. 

public class Document {
    List<String> words;
  
    public long characterCount() {
 		return this.sumaDeCaracteres;
	}
	
    public long calculateAvg() {
    	long avgLength = this.sumaDeCaracteres / this.words.size();
 	return avgLength;
	}
	
	public long sumaDeCaracteres(){
		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
}

Paso 2.2 Variables temporales 

public class Document {
    List<String> words;
  
    public long characterCount() {
 		return this.sumaDeCaracteres;
	}
	
    public long calculateAvg() {
    	return this.sumaDeCaracteres / this.words.size();
	}
	
	public long sumaDeCaracteres(){
		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
}

Paso 3.1 nombre misterioso 

public class Document {
    List<String> words;
  
    public long retornarSumaDeCaracteres() {
 		return this.sumaDeCaracteres;
	}
	
    public long calculateAvg() {
    	return this.sumaDeCaracteres / this.words.size();
	}
	
	public long sumaDeCaracteres(){
		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
}

Paso 3.2 nombre misterioso 

public class Document {
    List<String> words;
  
    public long retornarSumaDeCaracteres() {
 		return this.sumaDeCaracteres;
	}
	
    public long calcularPromedioDeCaracteres() {
    	return this.sumaDeCaracteres / this.words.size();
	}
	
	public long sumaDeCaracteres(){
		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
}

//Me hace ruido como quedan los meotodos retornarSumaDeCaracteres y el sumaDeCaracteres. Diria que la mejor opcion es dejar un solo metodo porque literalmente hacen lo mismo pero capaz si calculo e imprimo en uno solo es un metodolargo?
//Otra duda. Que tan explicitos tienen que ser los nombres de los metodos?

Opcional Paso 4 codigoDuplicado 

public class Document {
    List<String> words;
  
    public long retornarSumaDeCaracteres() {
 		return this.words.stream().mapToLong(w -> w.length()).sum();
	}
	
    public long calcularPromedioDeCaracteres() {
    	return this.retornarSumaDeCaracteres / this.words.size();
	}
	
}

3. 
El error en este codigo es la posibilidad de la division por 0 y obviamente el refactoring no lo soluciona ya que el refactoring no soluciona codigo que este mal, esa no es su funcion. 
CONSULTAR
Ejecicio 2.6
Para cada una de las siguientes situaciones, realice en forma iterativa los siguientes pasos:
(i) indique el mal olor,
(ii) indique el refactoring que lo corrige, 
(iii) aplique el refactoring, mostrando el resultado final (código y/o diseño según corresponda). 
Si vuelve a encontrar un mal olor, retorne al paso (i).

public class Usuario {
    String tipoSubscripcion;
    // ...

    public void setTipoSubscripcion(String unTipo) {
   	 this.tipoSubscripcion = unTipo;
    }
    
    public double calcularCostoPelicula(Pelicula pelicula) {
   	 double costo = 0;
   	 if (tipoSubscripcion=="Basico") {
   		 costo = pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno();
   	 }
   	 else if (tipoSubscripcion== "Familia") {
   		 costo = (pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno()) * 0.90;
   	 }
   	 else if (tipoSubscripcion=="Plus") {
   		 costo = pelicula.getCosto();
   	 }
   	 else if (tipoSubscripcion=="Premium") {
   		 costo = pelicula.getCosto() * 0.75;
   	 }
   	 return costo;
    }
}

public class Pelicula {
    LocalDate fechaEstreno;
    // ...

    public double getCosto() {
   	 return this.costo;
    }
    
    public double calcularCargoExtraPorEstreno(){
    // Si la Película se estrenó 30 días antes de la fecha actual, retorna un cargo de 0$, caso contrario, retorna un cargo extra de 300$
   	return (ChronoUnit.DAYS.between(this.fechaEstreno, LocalDate.now()) ) > 30 ? 0 : 300;
    }
}
  
i.
.Sentencia switch 
//Entiendo que la parte de HBOO no se le da importancia pq sino seria una lazy class o data class 

ii.
.Replace Conditional with Polymorphism
.Creo jerarquia?
  
iii.

public abstract class Usuario {
    // ...

    public double calcularCostoPelicula(Pelicula pelicula) {
  		return pelicula.getCosto();
	}

public class UsuarioBasico extends Usuario {
	public double calcularCostoPelicula(Pelicula pelicula){
		return super.calcularCostoPelicula(Pelicula) + pelicula.calcularCargoExtraPorEstreno();
	}
}

public class UsuarioFamilia extends Usuario {
	public double calcularCostoPelicula(Pelicula pelicula){
		return super.calcularCostoPelicula(Pelicula) + pelicula.calcularCargoExtraPorEstreno() * 0.90;
	}
}

public class UsuarioPlus extends Usuario {
	/...
}

public class UsuarioPremium extends Usuario {
	public double calcularCostoPelicula(Pelicula pelicula){
		return super.calcularCostoPelicula(Pelicula) * 0.75;
	}
}

public class Pelicula {
    LocalDate fechaEstreno;
    // ...

    public double getCosto() {
   	 return this.costo;
    }
    
    public double calcularCargoExtraPorEstreno(){
    // Si la Película se estrenó 30 días antes de la fecha actual, retorna un cargo de 0$, caso contrario, retorna un cargo extra de 300$
   	return (ChronoUnit.DAYS.between(this.fechaEstreno, LocalDate.now()) ) > 30 ? 0 : 300;
    }
}

//En este caso tambien interpreto que los comentarios son para nosotros pq el nombre del metodo es claro.Igualmente la funcion es raro pq lo logico seria que te cobre mas si es un estreno. Pero si somos fieles a la refactorizacion no hay que cambiar la funcionalidad. (Capaz que le pifiaron y listo)
//Esto me hace mucho ruido la verdad.
//Nose si seria mejor la jerarquia de peliculas el tema es que tampoco tiene sentido, que el usuario le pase su tipo de suscripcion tambien me parece re choto. 
//Se podria hacer otra clase abstracta de usuario para el basico y familia? 
//Osea lo logico es que la pelicula calcule su precio obviamente, en el metodo de los usuarios se deberia agregar/restar dependiendo la suscripcion pero tener que meter lo de calcularCargoExtra en el metodo del usuario es como medio envidioso pero que solucion tenes? Y ademas lo de tener el metodo que calcule el costo de la pelicula en Usuario cuando ya lo tenes en pelicula tambien como que repite pero bueno de esta forma no es tan envidioso pq llamas al metodo que esta en la super clase ponele.

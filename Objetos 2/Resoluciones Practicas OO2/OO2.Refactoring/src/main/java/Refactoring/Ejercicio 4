Ejercicio 4 
Tareas:
1. Dado el código anterior, aplique únicamente los siguientes refactoring:
Replace Loop with Pipeline (líneas 16 a 19)
Replace Conditional with Polymorphism (líneas 21 a 27)
Extract method y move method (línea 28)
Extract method y replace temp with query (líneas 28 a 33)

2. Realice el diagrama de clases del código refactorizado

01: public class Pedido {
02:  private Cliente cliente;
03:  private List<Producto> productos;
04:  private String formaPago;
05:  public Pedido(Cliente cliente, List<Producto> productos, String formaPago) {
06:     if (!"efectivo".equals(formaPago)
07:        && !"6 cuotas".equals(formaPago)
08:        && !"12 cuotas".equals(formaPago)) {
09:          throw new Error("Forma de pago incorrecta");
10:    }
11:    this.cliente = cliente;
12:    this.productos = productos;
13:    this.formaPago = formaPago;
14:   }
15:   public double getCostoTotal() {
16:     double costoProductos = 0;
17:     for (Producto producto : this.productos) {
18:       costoProductos += producto.getPrecio();
19:     }
20:     double extraFormaPago = 0;
21:     if ("efectivo".equals(this.formaPago)) {
22:       extraFormaPago = 0;
23:     } else if ("6 cuotas".equals(this.formaPago)) {
24:       extraFormaPago = costoProductos * 0.2;
25:     } else if ("12 cuotas".equals(this.formaPago)) {
26:       extraFormaPago = costoProductos * 0.5;
27:     }
28:     int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
29:     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
30:     if (añosDesdeFechaAlta > 5) {
31:       return (costoProductos + extraFormaPago) * 0.9;
32:     }
33:     return costoProductos + extraFormaPago;
34:   }
35: }
36: public class Cliente {
37:   private LocalDate fechaAlta;
38:   public LocalDate getFechaAlta() {
39:     return this.fechaAlta;
40:   }
41: }
42: public class Producto {
43:   private double precio;
44:   public double getPrecio() {
45:     return this.precio;
46:   }
47: }

1. 
Replace Loop with Pipeline (líneas 16 a 19)	//En este caso entiendo no hace falta pero estaria bien dividir al Pedido en PedidoEnEfectivo y PedidoEnCuotas?
//PREGUNTAR: Esta mal usar el Super()?

  public class Pedido {
  private Cliente cliente;
  private List<Producto> productos;
  private String formaPago;
  public Pedido(Cliente cliente, List<Producto> productos, String formaPago) {
     if (!"efectivo".equals(formaPago)
        && !"6 cuotas".equals(formaPago)
        && !"12 cuotas".equals(formaPago)) {
          throw new Error("Forma de pago incorrecta");
    }
    this.cliente = cliente;
    this.productos = productos;
    this.formaPago = formaPago;
   }
   public double getCostoTotal() {
     double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     if ("efectivo".equals(this.formaPago)) {
       extraFormaPago = 0;
     } else if ("6 cuotas".equals(this.formaPago)) {
       extraFormaPago = costoProductos * 0.2;
     } else if ("12 cuotas".equals(this.formaPago)) {
       extraFormaPago = costoProductos * 0.5;
     }
     int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (añosDesdeFechaAlta > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   }
  }
  public class Cliente {
   private LocalDate fechaAlta;
   public LocalDate getFechaAlta() {
     return this.fechaAlta;
   }
 }
  public class Producto {
   private double precio;
   public double getPrecio() {
     return this.precio;
   }
 }
 
 Replace Conditional with Polymorphism (líneas 21 a 27)
 
  public abstract class Pedido {
  	protected Cliente cliente;
  	protected List<Producto> productos;
  	
  	public Pedido(Cliente cliente, List<Producto> productos) {
    	this.cliente = cliente;
    	this.productos = productos;
    	this.formaPago = formaPago;
   }
   public abstract double getCostoTotal();
   
  }
  
  public class Cliente {
   private LocalDate fechaAlta;
   public LocalDate getFechaAlta() {
     return this.fechaAlta;
   }
 }
 
  public class Producto {
   private double precio;
   public double getPrecio() {
     return this.precio;
   }
 }
 
 public class PedidoEnEfectivo extends Pedido{
 	public PedidoEnEfectivo(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (añosDesdeFechaAlta > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 }
 
 public class PedidoEn6Cuotas extends Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
     extraFormaPago = costoProducto * 0.2;
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (añosDesdeFechaAlta > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 }
 
 public class PedidoEn12Cuotas extens Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     int añosDesdeFechaAlta = Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
     extraFormaPago = costoProducto * 0.5;
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (añosDesdeFechaAlta > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 }
 
 Extract method y move method (línea 28)
 //En este paso. Para ser 100% prolijos habria que hacer el metodo primero en cada subclase para de esta forma hacer el extract Method de cada clase y recien ahi moverlo a la clase padre? Entenderia que si. 
 
 
  public abstract class Pedido {
  	protected Cliente cliente;
  	protected List<Producto> productos;
  	
  	public Pedido(Cliente cliente, List<Producto> productos) {
    	this.cliente = cliente;
    	this.productos = productos;
    	this.formaPago = formaPago;
   }
   public abstract double getCostoTotal();
   public int calcularAñosDesdeFechaAlta (){
   	return Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
   }
   
  }
  
  public class Cliente {
   private LocalDate fechaAlta;
   public LocalDate getFechaAlta() {
     return this.fechaAlta;
   }
 }
 
  public class Producto {
   private double precio;
   public double getPrecio() {
     return this.precio;
   }
 }
 
 public class PedidoEnEfectivo extends Pedido{
 	public PedidoEnEfectivo(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (this.calcularAñosDesdeFechaAlta() > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 }
 
 public class PedidoEn6Cuotas extends Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     extraFormaPago = costoProducto * 0.2;
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (this.calcularAñosDesdeFechaAlta() > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 }
 
 public class PedidoEn12Cuotas extens Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
 	double costoProductos = 0;
     double extraFormaPago = 0;
     costoProductos = this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
     extraFormaPago = costoProducto * 0.5;
     // Aplicar descuento del 10% si el cliente tiene más de 5 años de antiguedad
     if (this.calcularAñosDesdeFechaAlta() > 5) {
       return (costoProductos + extraFormaPago) * 0.9;
     }
     return costoProductos + extraFormaPago;
   	}
 } 
 
 Extract method y replace temp with query (líneas 28 a 33)
 //A esta altura yo ya reemplace la variable temporal añosDesdeFechaAlta, entonces entiendo que se refiere a que remplace las otras dos variables temporales? Porque otra opcion no me queda si en el paso anterior justamente hacia referencia a la linea 28 que es donde esta la var int. 
 
 
   public abstract class Pedido {
  	protected Cliente cliente;
  	protected List<Producto> productos;
  	
  	public Pedido(Cliente cliente, List<Producto> productos) {
    	this.cliente = cliente;
    	this.productos = productos;
    	this.formaPago = formaPago;
   }
   public abstract double getCostoTotal();
   
   public int calcularAñosDesdeFechaAlta (){
   	return Period.between(this.cliente.getFechaAlta(), LocalDate.now()).getYears();
   }
   
   public abstract double calcularCostoExtra();
   
   public double calcularCostoProductos(){
   		return this.productos.stream().mapToDouble(p -> p.getPrecio()).sum();
   }
   
   public double calcularDescuentoAntiguedad(){
   		if (this.calcularAñosDesdeFechaAlta() > 5){
   			return 0.9;
   		}
   		return 0;
   }
   
  }
  
  public class Cliente {
   private LocalDate fechaAlta;
   public LocalDate getFechaAlta() {
     return this.fechaAlta;
   }
 }
 
  public class Producto {
   private double precio;
   public double getPrecio() {
     return this.precio;
   }
 }
 
 public class PedidoEnEfectivo extends Pedido{
 	public PedidoEnEfectivo(){
 		super();
 	}
 	
 	public double getCostoTotal(){
       return (this.calcularCostoProductos() + this.calcularExtraFormaPago()) * this.calcularDescuentoAntiguedad();
   	}
   	
   	public double calcularExtraFormaPago(){
   		return this.calcularCostoProductos() * 0;
   	}
 }
 
 public class PedidoEn6Cuotas extends Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
       return (this.calcularCostoProductos() + this.calcularExtraFormaPago()) * this.calcularDescuentoAntiguedad();
   	}
   	
   	public double calcularExtraFormaPago(){
   		return this.calcularCostoProductos() * 0.2;
   	}
 }
 
 public class PedidoEn12Cuotas extens Pedido{
 	public PedidoEn6Cuotas(){
 		super();
 	}
 	
 	public double getCostoTotal(){
       return (this.calcularCostoProductos() + this.calcularExtraFormaPago()) * this.calcularDescuentoAntiguedad();
   	}
   	
   	public double calcularExtraFormaPago(){
   		return this.calcularCostoProductos() * 0.5;
   	}
 } 
 
 
 //Entiendo que ahi estaria porque hago el Extract Method sacando la parte en la que calcula el descuento y elimino las variables temporales realizando los metodos. Se podria mejorar haciendo un move method y pasando el metodo getCostoTotal() al padre ya que finalmente es el mismo en los hijos. Solamente cambia la "var" calcularExtraFormaPago(). Pero entiendo que no se pide. 
 //En realidad seria hacer un PullUpMethod. 
 
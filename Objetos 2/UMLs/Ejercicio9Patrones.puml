@startuml Ejercicio9 

Usuario -> "*" AutoEnAlquiler : autosEnAlquiler 
Reserva --> "1" AutoEnAlquiler 
Reserva --> Usuario : conductor
AutoEnAlquiler -> PoliticaDeCancelacion : Politica 
PoliticaDeCancelacion <.. PoliticaModerada
PoliticaDeCancelacion <.. PoliticaEstricta
PoliticaDeCancelacion <.. PoliticaFlexible 
'En este caso tambien estaba bien lo de que el AutoEnAlquiler tenga el metodo que "transmita" la info de la politica entiendo que esta bien para mantener el encapsulamiento se podria decir ya que si la reserva tendria en su metodo una cadena en la cual se termina "encadenando" con el . a la politica la cual es "interna" del auto ahi se estaria rompiendo el encapsulamiento y generando envidia osea pq la reserva conoce al auto pero NO a la politica, el auto es quien conoce a la politica. Entonces este tiene que tener una manera de trasnferir la info que la politica retorna.'
Class Usuario {
    -nombre : String
    +cargarAuto(AutoEnAlquiler auto)
}

Class AutoEnAlquiler <<Context>> {
    -precioPorDia : Real 
    -cantidadPlazas : Integer 
    -marca : String 
    +calcularMontoDeReembolso(fechaInicio Date, montoAPagar Real): Real 
    +cambiarPolitica(PoliticaDeCancelacion p)
}

Class Reserva {
    -cantidadDias : Integer 
    -fecha : Date 
    +montoAPagar() : Real 
    +montoAReembolsar() : Real 
}

Interface PoliticaDeCancelacion <<Strategy>> {
    +calcularReembolso(fechaInicio Date, montoAPagar Real) : Real 
}

Class PoliticaFlexible <<ConcreteStrategyA>> {
    +calcularReembolso(fechaInicio Date, montoAPagar Real) : Real 
}

Class PoliticaModerada <<ConcreteStrategyB>> {
    +calcularReembolso(fechaInicio Date, montoAPagar Real) : Real 
} 

Class PoliticaEstricta <<ConcreteStrategyC>> {
    +calcularReembolso(fechaInicio Date, montoAPagar Real) : Real 
}

@enduml
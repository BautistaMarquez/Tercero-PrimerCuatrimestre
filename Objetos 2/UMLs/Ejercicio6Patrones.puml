@startuml Ejercicio6

Usuario <- Excursion : UsuariosInscriptos 
Usuario <- Excursion : ListaDeEspera
Excursion -> Estado : estado
Estado <.. Provisoria
Estado <.. Definitiva
Estado <.. Maxima

'En este caso tambien esta bien lo del tema de que si una funcionalidad esta relacionada al estado, la tiene que realizar el estado. La clase concreta diria que siempre tiene que tener un metodo que solamente sea return LoQueHaceLaStrategy/State aunque la clase concreta tenga la informacion/variables/datos para realizar las acciones por si solas tendria que usar varias condiciones lo cual sabemos es un mal olor y tambien tendria que ser un indicio de que esta mal. Es normal que pase que algun metodo no retorne nada, en este caso la ayudante me dijo que la clases hijas hagan override al metodo, entiendo es preferible ahorrar un poco de codigo. Total el override no esta mal.'
class Excursion <<Context>> {
    -nombre : String
    -fechaInicio : Date 
    -fechaFin : Date 
    -puntoEncuentro : String 
    -costo : Double 
    -cupoMin : Int 
    -cupoMax : Int 
    +inscribir(Usuario unUsuario)
    +retornarCupoActual() : Int
    +obtenerInformacion() : String
    +setEstado(Estado e)
    +calcularFaltantes() : Int
}

class Usuario {
    -nombre : String 
    -apellido : String 
    -mail : String 

}

interface Estado <<State>> {
    +obtenerInformacion(Excursion exc) : String
    +realizarString(Excursion exc) : String
}

class Provisoria <<ConcreteStateA>> {
    +obtenerInformacion(Excursion exc) : String
    +realizarString(Excursion exc) : String
}

class Definitiva <<ConcreteStateB>> {
    +obtenerInformacion(Excursion exc) : String
    +realizarString(Excursion exc) : String
}

class Maxima <<ConcreteStateC>> {
    +obtenerInformacion(Excursion exc) : String
    +realizarString(Excursion exc) : String
}

@enduml
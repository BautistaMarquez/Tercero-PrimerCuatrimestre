Practica Nro 2 
Sintaxis 

Ejercicio 1: Hecho en  papel. 

Ejercicio 2: ¿Cuál es la importancia de la sintaxis para un lenguaje? ¿Cuáles son sus elementos?

2.
Sintaxis: Conjunto de reglas que definen como componer letras, dígitos y otros caracteres para formar los programas.
La importancia de la sintaxis recide en que esta establece reglas que definen como deben combinarse los componentes basicos, llamadas "word", para formar sentencias y programas. 
Los elementos de la sintaxis son: 
    Alfabeto o conjunto de caracteres: Es el conjunto finito de simbolos admitidos en el lenguaje 
    Identificadores: cadena de letras y digitos que deben comenzar con una letra 
    Operadores: son los de suma, resta, etc. la mayoria de los lenguajes utilizan +,-. En los otros operadores no hay tanta uniformidad
    Comentarios y uso de blancos: hacen los programas mas legibles
    Palabra clave y palabra reservada: las palabras claves tienen un significado dentro de un contexto y las palabras reservadas son palabras claves que ademas no pueden ser usadas por el programador como identificador de otra entidad (Ej: if, else, and, etc.). 


Ejercicio 3: ¿Explique a qué se denomina regla lexicográfica y regla sintáctica?

3.
Reglas lexicas: Son el conjunto de reglas para formar las "word", a partir de los caracteres del alfabeto. Como por ejemplo las diferencias entre mayusculas y minusculas o los simbolos de distinto (en C != y en Pascal <>)

Reglas sintacticas: Son el conjunto de reglas que definen como formar a partir de esas palabras, las "expresiones" y "sentencias". Como por ejemplo el If en C no llevan "then" y en Pascal si. 


Ejercicio 4:¿En la definición de un lenguaje, a qué se llama palabra reservadas? ¿A qué son equivalentes en la definición de una gramática? De un ejemplo de palabra reservada en el lenguaje que más conoce. (Ada,C,Ruby,Python,..)

4.
Palabras reservadas: son palabras claves que ademas no pueden ser usadas por el programador como identificador de otra entidad. En la definicion de una gramatica son equivalentes a los simbolos terminales ya que estos aparecen en las reglas de produccion y no pueden descomponerse en otros simbolos del lenguaje. Osea que son los elementos basicos con los que se construyen las expresiones del lenguaje.
Por ejemplo en Pascal tenemos: if, not, else, while, do, begin, array, etc. 


Ejercicio 5: Dada la siguiente gramática escrita en BNF:
G= ( N, T, S, P)
N = {<numero_entero>, <digito> }
T = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
S = <numero_entero>
P = {<numero_entero>::=<digito><numero_entero> | <numero_entero><digito> | <digito><digito> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9}
a- Identifique las componentes de la misma
b- Indique porqué es ambigua y corríjala

5. 
a-
Simbolos no terminales(N):{<numero_entero>, <digito>}
Simbolos terminales(T):{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 
Simbolo inicial(S):<numero_entero>
Producciones(P):{<numero_entero>::=<digito><numero_entero> | <numero_entero><digito> | <digito><digito> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9}

b.
La gramatica es ambigua ya que una misma cadena puede ser derivada de varias maneras con diferentes arboles de derivacion en los casos <numero_entero>::=<digito><numero_entero> y  <numero_entero>::=<numero_entero><digito>. Entiendo que la solucion es eliminar una de estas dos opciones para eliminar la ambiguedad ya que en este caso es lo mismo definir una gramatica recursiva por la izquierda o por la derecha, pero no ambas.
Anotacion repaso: ademas el tener digito-digito esta mal pq para realizar esta accion esta el numero entero - digito, tendria que ver como se puede aclarar esto de una mejor forma. Esto en mi solucion lo cambie pero no habia dicho nada al respecto.

Simbolos no terminales(N):{<numero_entero>, <digito>}
Simbolos terminales(T):{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} 
Simbolo inicial(S):<numero_entero>
Producciones(P):{<numero_entero>::=<digito><numero_entero> | <digito> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9}


Ejercicio 6: Defina en BNF (Gramática de contexto libre desarrollada por Backus-Naur) la gramática para la definición de una palabra cualquiera.

6. 
<Palabra> ::= <letra> | <letra><Palabra> ::= A|B|C|D|E|F|G|H|I|J|K|L|O|P|Q|R|S|T|U|V|W|X|Y|Z
o
G=(N,T,S,P)
N={letra}
T={ABECEDARIO}
S={Palabra}
P={<Palabra> ::= <letra> | <letra><Palabra> ::= A|B|C|D|E|F|G|H|I|J|K|L|O|P|Q|R|S|T|U|V|W|X|Y|Z} (Mayusculas y Minusculas).

Averiguar por el tema de la diferencia entre letra-palabra y palabra-leta osea pq de la segunda forma escribirias a la vuelta de la recursion por decir de alguna forma lo cual es como bastante anti-intuitivo como que deberias saber hasta donde llega y escribir de atras para adelante? Igual no deberia hacerme mucho quilombo con esto diria yo. 

.El tema del arbol es seguir la idea de la construccion paso por paso, en esta caso la palabra es un conjunto de de letras entonces a la hora de formar una palabra esta puede ser una letra o una letra seguida de otra palabra. 
Ej arbol de derivacion de la palabra "Hola":
<palabra> 
 <letra> <palabra>
    H <palabra>
    H   <letra><palabra>
    H      o   <palabra>
    H      o <letra> <palabra>
    H      o    l    <palabra>
    H      o    l     <letra>
    H      o    l        a

Claro osea como te quedaria el arbol si fuera palabra-letra, chequear esto. Igual me parece que el orden no importa osea el 1ro es la 1er letra y fin.

Ejercicio 7: Defina en EBNF la gramática para la definición de números reales. Inténtelo desarrollar para BNF y explique las diferencias con la utilización de la gramática EBNF.

7.
EBNF: 
G=(N,T,S,P)
N={<parte_decimal>, <parte_entera>, <digito>}
T={0|..|9}
S={<numero_real>}
P={
<numero_real> ::= ['-'] <parte_entera> ['.' <parte_decimal>]
<parte_entera> ::= <digito> {<digito>}*
<parte_decimal> ::= <digito> {<digito>}*
<digito> ::= 0|1|2|3|4|5|6|7|8|9 
}


BNF:
G=(N,T,S,P)
N={<parte_decimal>, <parte_entera>, <digito>, <primer_numero>}
T={0|..|9}
S={<numero_real>}
p={
<numero_real> ::= '-' <parte_entera> | '-' <parte_entera> '.' <parte_decimal> | <parte_entera> | <parte_entera> '.' <parte_decimal>
<parte_entera> ::= <digito> | <digito> <parte_entera> 
<parte_decimal> ::= <digito> | <digito> <parte_decimal> 
<digito> ::= 0|1|2|3|4|5|6|7|8|9 
}

En la ENBF se agregan la posibilidad de ahorrarte la recursion usando {}, la posibilidad de elegir un elemento optativo con [] y seleccionar una opcion con (|). Ademas para la repeticion tenemos * que indica que se puede repetir 0 o mas veces y + que indica que se tiene que repetir 1 o mas veces.


Ejercicio 8: Utilizando la gramática que desarrolló en los puntos 6 y 7, escriba el árbol sintáctico de:
a. Conceptos
b. Programación
c. 1255869
d. 854,26
e. Conceptos de lenguajes

8.
Hecho en hoja //Deberia rearmarlos.


Ejercicio 9: Defina utilizando diagramas sintácticos la gramática para la definición de un identificador de un lenguaje de programación.Tenga presente como regla que un identificador no puede comenzar con números.

9.
Hecho en hoja 


Ejercicio 10:
a- Defina con EBNF la gramática para una expresión numérica, dónde intervienen variables y números. Considerar los operadores +, -, * y / sin orden de prioridad. No considerar el uso de paréntesis.
b- A la gramática definida en el ejercicio anterior agregarle prioridad de operadores.
c- Describa con sus palabras los pasos y decisiones que tomó para agregarle prioridad de operadores al ejercicio anterior.

10.
a. 
G=(N,T,S,P)
N={<termino_pri>, <termino_sec>, <var>, <num>, <parte_entera>, <parte_decimal>, <digito>,<operador>}
T={0|1|2|3|4|5|6|7|8|9, A|..|Z, +|-|*|/}
S={<exp>}
P={
    <exp> ::= <termino_pri> [{<termino_sec>}*]
    <termino_pri> ::= (<var>|<num>) <operador> [(<var>|<num>)] //Otra forma seria sacar la segunda var|num y hacer que la repeticion del temino sec sea obligatorio. 
    <termino_sec> ::=  <operador> [(<var>|<num>)] 
    <var> ::= A|..|Z 
    <num> ::= '-' <parte_entera> | '-' <parte_entera> '.' <parte_decimal> | <parte_entera> | <parte_entera> '.' <parte_decimal>
    <parte_entera> ::= <digito> | <digito> <parte_entera> 
    <parte_decimal> ::= <digito> | <digito> <parte_decimal> 
    <digito> ::= 0|1|2|3|4|5|6|7|8|9 
    <operador> ::= +|-|*|/
}
//Chequear el uso de [] siento que hay un par que no van y estan mal pero capaz ahora estoy confudido, diria que estan mal. 
//La 2da opcion que hice aca como que no usa parentesis y la primera si. Pero de la primera me genera duda el uso de [] o capaz que no, osea entiendo que hice que la primera parte sea opcional por si queres hacer algo antes del termino que es opcional y despues la repeticion infinita de estos y afuera de los terminos se multiplicaria/dividiria y adentro se sumaria/restaria. Capaz le faltaria la opcion de termino y atras la parte de operador_priori - var/num 
b.
G=(N,T,S,P)
N={<termino_pri>, <termino_sec>, <var>, <num>, <parte_entera>, <parte_decimal>, <digito>,<operador>}
T={0|1|2|3|4|5|6|7|8|9, A|..|Z, +|-|*|/}
S={<exp>}
P={
    <exp> ::= [(var|num) <operador_priori>] <termino> {<operador_priori> <termino>}* || (var|num) (<operador_priori>|<operador_no_priori>) (var|num) {(<termino_sec_priori>|<termino_sec_no_priori>)}*
    <termino> ::= '('[(<var>|<num>)] <operador_no_priori> [(<var>|<num>)]')'
    <termino_sec_priori> ::=  <operador_priori> [(<var>|<num>)] 
    <termino_sec_no_priori> ::= <operador_no_priori> [(<var>|<num>)]
    <var> ::= A|..|Z 
    <num> ::= '-' <parte_entera> | '-' <parte_entera> '.' <parte_decimal> | <parte_entera> | <parte_entera> '.' <parte_decimal>
    <parte_entera> ::= <digito> | <digito> <parte_entera> 
    <parte_decimal> ::= <digito> | <digito> <parte_decimal> 
    <digito> ::= 0|1|2|3|4|5|6|7|8|9 
    <operador_priori> ::= *|/
    <operador_no_priori> ::= +|-
}

c.Con la primera opcion de exp intento abarcar las expresiones que sean amplias dividiendo los operadores con prioridad afuera de los parentensis osea poder hacer 3*(2+1)... y con la segunda opcion de exp intento abarcar las expresiones sin parentesis como 3*2+1/4*1 me pasa que pienso que hay muchas opciones a realizar y no tengo claro si el tema de prioridades es que utilicemos siempre parentesis por asi decir que seria a lo que esta mas encaminado la primera opcion pero siento que no abarco todas las posibilidades de esta forma. 


Ejercicio 11: La siguiente gramática intenta describir sintácticamente la sentencia for de ADA, indique cuál/cuáles son los errores justificando la respuesta.
N= {<sentencia_for>, <bloque>, <variable>, <letra>, <cadena>, <digito>, <otro>, <operacion>,
<llamada_a_funcion>, <numero>, <sentencia> }
P= { <sentencia_for>::= for (i= IN 1..10) loop <bloque> end loop;
<variable>::= <letra> | <cadena>
<cadena>::= { ( <letra> | <digito> | <otro> ) }+
<letra>::=( a | .. | z | A | .. | Z )
<digito>::= ( 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 )
<bloque>::= <sentencia> | <sentencia> <bloque> | <bloque> <sentencia> ;
<sentencia>::= <sentencia_asignacion> | <llamada_a_funcion> | <sentencia_if> |
<sentencia_for> | <sentencia_while> | <sentencia_switch> }

11.
.En <bloque>::= <sentencia> | <sentencia> <bloque> | <bloque> <sentencia> ; Hay ambiguedad debido a la repeticion de <sentencia> <bloque> | <bloque> <sentencia> se llegaria a la misma respuesta por izquierda y por derecha 

.Faltarian la definicion de los No terminales <sentencia_asignacion> | <llamada_a_funcion> | <sentencia_if> |
<sentencia_for> | <sentencia_while> | <sentencia_switch>, ademas de que hay no terminales que ni se usan lo cual no tiene sentido nose si es que esta todo mal practicamente o si yo no estoy entendiendo bien 

.Sin contar que falta definir T y S, supongo que eso no esta aproposito pero nose tiene demasiados errores. 


Ejercicio 12: Realice en EBNF la gramática para la definición un tag div en html 5. (Puede ayudarse con el siguiente enlace (https://developer.mozilla.org/es/docs/Web/HTML/Elemento/div))

12.
G=(N,T,S,P)
N={<letra>,<palabra>,<atributo>, <contenido>, <elemento, <Palabra>, <at>, <etiqueta_inicio_doble>, <etiqueta_fin_doble>, <etiqueta_inicio_simple>, <etiqueta_fin_simple>}
T={class|..|id, A|..|Z, a|..|z, .|..|/, />}
S={<contenedor>}
P={
    <contenedor> ::= <etiqueta_inicio_doble> [{<atributo>}*]> {<contenido>} <etiqueta_fin_doble> | <etiqueta_inicio_simple> [{<atributo>}*]> {<contenido>} <etiqueta_fin_simple>
    <atributo> ::= <at> '=' "<palabra>"
    <contenido> ::= <elemento>[{<elemento>}*] || {<palabra>*}
    <elemento> ::= <contenedor> 
    <Palabra> ::= <letra> | <letra><Palabra> 
    <at> ::= class|..|id
    <letra> ::= A|..|Z, a|..|z, .|..|/
    <etiqueta_inicio_doble> ::= '<'<palabra>'>'
    <etiqueta_fin_doble> ::='</'<palabra>'>'
    <etiqueta_inicio_simple> ::= '<'palabra
    <etiqueta_fin_simple> ::= '/>'
}
Con esta gramatica mi idea es permitir generar contenedores sea un div o lo que sea que tenga atributos y pueda o no contener otros contenedores que pueden utilizar etiquetas "simples" o "dobles". El contenido es opcional porque por ejemplo una imagen no tiene contenido simplemente utiliza atributos, y entiendo que obviamente la persona pueda equivocarse por asi decir y poner cosas erroneas por asi decir como palabras de etiquetas que no existen pero eso mismo es HTML se puede hacer asique entiendo no habria problema con eso. Yo le doy la posibilidad al usuario que haga el div ya si lo hace mal es tema suyo entiendo. 
Igualmente nose si esta bien que yo ponga palabra entre los parentesis o en las etiquetas tendria que poner como terminales ya a las etiquetas predefinidas onda: <div> </div>.


Ejercicio 13: Defina en EBNF una gramática para la construcción de números primos.¿Qué debería agregar a la gramática para completar el ejercicio?

13.
Nose como se construirian los numeros primos la verdad. Preguntarle a GPT.
No entiendo a que hace referencia la pregunta 
G=(N,T,S,P)


Ejercicio 14: Sobre un lenguaje de su preferencia escriba en EBNF la gramática para la definición de funciones o métodos o procedimientos (considere los parámetros en caso de ser necesario)

14. 
Definicion de metodos en java.

public void setNombre(n String){
    this.nombre = n; 
}
o 
public String getNombre(){
    return this.nombre;
}

G=(N,T,S,P)
N={<visibilidad>, <valor>, <nombre>, <nombre_parametro>, <parametro>, <contenido>, <retorno>, <Palabra>, <letra>}
T={A|..|Z, a|..|z, .|..|/, }
S={<metodo>}
P={
    <metodo> ::= <visibilidad> <valor> <nombre> '('{<nombre_parametro> <parametro>}*')''{' <contenido> [<retorno>]'}'
    <visibilidad> ::= 'public'|'private'
    <valor> ::= 'void'|'String'|..|'int'
    <nombre> ::= <palabra>
    <Palabra> ::= <letra> | <letra><Palabra> 
    <letra> ::= A|..|Z, a|..|z, .|..|/, 0|..|9
    <nombre_parametro> ::= <palabra>
    <parametro>::= <valor>
    <contenido> ::= {<estructura>}* | {<palabra> ''}* 
    <estructura> ::= //podrian ser if,for,case, etc. Estos deberian inicio, contenido, fin, opcionales, otra estructura adentro?
    <retorno> ::= 'return' <variable> | 'return' <palabra>
}

Aca me pasa lo mismo que nose si por ejemplo en visibilidad estaria bien poner las posibilidades (public, private)
me pasa que un metodo puede tener tantas variantes que mientras que pienso la gramatica se me van formando mas posibilidades, realmente deberia chequearlo mas este tema. Porque es muy amplio y complejo si se quiere un nivel de exactitud perfecto por asi decir. 
Creo entender la idea pero al mismo tiempo nose hasta donde abarcar 

{ Opcion dada por ChatGPT para el punto10, supongo que a mi opcion le falta que la parte interna de un termino sea infinita osea la recursion, como tira esta chatGPT.
Expresión = Término, { ("+" | "-"), Término };
Término   = Factor, { ("*" | "/"), Factor } ;
Factor    = Número | Variable ;
Número    = Digit, { Digit } ;
Variable  = Letter, { Letter | Digit } ;
Digit     = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
Letter    = "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z" ;
}